import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

class CustomerBehaviorPredictor:
    def __init__(self):
        self.model = LinearRegression()
        self.scaler = StandardScaler()
        self.le_gender = LabelEncoder()
        self.le_job = LabelEncoder()
        self.feature_names = ['Tu·ªïi', 'Thu nh·∫≠p', 'ƒëi·ªÉm t√≠n d·ª•ng', 'Gi·ªõi t√≠nh_encoded', 'Ngh·ªÅ nghi·ªáp_encoded']
        
    def load_and_prepare_data(self):
        """T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu"""
        # ƒê·ªçc d·ªØ li·ªáu
        df_customers = pd.read_csv('data7.1.csv')
        df_purchases = pd.read_csv('data7.2.csv')
        
        # L√†m s·∫°ch t√™n c·ªôt
        df_customers.columns = df_customers.columns.str.strip()
        df_purchases.columns = df_purchases.columns.str.strip()
        
        # K·∫øt h·ª£p d·ªØ li·ªáu
        merged_df = pd.merge(df_customers, df_purchases, on='ID kh√°ch h√†ng', how='inner')
        
        # L√†m s·∫°ch d·ªØ li·ªáu text
        for col in merged_df.select_dtypes(include=['object']).columns:
            merged_df[col] = merged_df[col].astype(str).str.strip()
        
        # Encoding categorical variables
        merged_df['Gi·ªõi t√≠nh_encoded'] = self.le_gender.fit_transform(merged_df['Gi·ªõi t√≠nh'])
        merged_df['Ngh·ªÅ nghi·ªáp_encoded'] = self.le_job.fit_transform(merged_df['Ngh·ªÅ nghi·ªáp'])
        
        return merged_df
    
    def train_model(self, df):
        """Hu·∫•n luy·ªán m√¥ h√¨nh"""
        X = df[self.feature_names]
        y = df['Gi√°']
        
        # Scale features
        X_scaled = self.scaler.fit_transform(X)
        
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        self.model.fit(X_scaled, y)
        
        # Cross-validation ƒë·ªÉ ƒë√°nh gi√°
        cv_scores = cross_val_score(self.model, X_scaled, y, cv=3, scoring='r2')
        
        print("=== K·∫æT QU·∫¢ HU·∫§N LUY·ªÜN ===")
        print(f"Cross-validation R¬≤ scores: {cv_scores}")
        print(f"Mean CV R¬≤ score: {cv_scores.mean():.3f} (+/- {cv_scores.std() * 2:.3f})")
        
        return X_scaled, y
    
    def predict_price(self, age, income, credit_score, gender, job):
        """D·ª± ƒëo√°n gi√° s·∫£n ph·∫©m cho kh√°ch h√†ng"""
        try:
            gender_encoded = self.le_gender.transform([gender])[0]
        except:
            gender_encoded = 0
            
        try:
            job_encoded = self.le_job.transform([job])[0]
        except:
            job_encoded = 0
        
        # T·∫°o input v√† scale
        input_data = np.array([[age, income, credit_score, gender_encoded, job_encoded]])
        input_scaled = self.scaler.transform(input_data)
        
        predicted_price = self.model.predict(input_scaled)[0]
        return max(0, predicted_price)  # ƒê·∫£m b·∫£o gi√° kh√¥ng √¢m
    
    def analyze_customer_segments(self, df):
        """Ph√¢n t√≠ch ph√¢n kh√∫c kh√°ch h√†ng"""
        # T·∫°o c√°c nh√≥m kh√°ch h√†ng d·ª±a tr√™n thu nh·∫≠p v√† tu·ªïi
        df['Income_Group'] = pd.cut(df['Thu nh·∫≠p'], 
                                   bins=[0, 40000, 60000, float('inf')], 
                                   labels=['Th·∫•p', 'Trung b√¨nh', 'Cao'])
        
        df['Age_Group'] = pd.cut(df['Tu·ªïi'], 
                                bins=[0, 30, 50, float('inf')], 
                                labels=['Tr·∫ª', 'Trung ni√™n', 'L·ªõn tu·ªïi'])
        
        # Ph√¢n t√≠ch theo nh√≥m
        segment_analysis = df.groupby(['Income_Group', 'Age_Group']).agg({
            'Gi√°': ['mean', 'count'],
            'ƒëi·ªÉm t√≠n d·ª•ng': 'mean'
        }).round(2)
        
        print("\n=== PH√ÇN T√çCH PH√ÇN KH√öC KH√ÅCH H√ÄNG ===")
        print(segment_analysis)
        
        return segment_analysis
    
    def visualize_results(self, X, y):
        """T·∫°o bi·ªÉu ƒë·ªì tr·ª±c quan"""
        # D·ª± ƒëo√°n cho to√†n b·ªô dataset
        y_pred = self.model.predict(X)
        
        plt.figure(figsize=(15, 10))
        
        # 1. Actual vs Predicted
        plt.subplot(2, 3, 1)
        plt.scatter(y, y_pred, alpha=0.7, color='blue')
        plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)
        plt.xlabel('Actual Price')
        plt.ylabel('Predicted Price')
        plt.title('Actual vs Predicted Prices')
        
        # 2. Feature Importance
        plt.subplot(2, 3, 2)
        feature_importance = abs(self.model.coef_)
        plt.bar(self.feature_names, feature_importance)
        plt.xlabel('Features')
        plt.ylabel('Coefficient Value')
        plt.title('Feature Importance')
        plt.xticks(rotation=45)
        
        # 3. Residuals
        plt.subplot(2, 3, 3)
        residuals = y - y_pred
        plt.scatter(y_pred, residuals, alpha=0.7)
        plt.axhline(y=0, color='r', linestyle='--')
        plt.xlabel('Predicted Price')
        plt.ylabel('Residuals')
        plt.title('Residual Plot')
        
        # 4. Price Distribution
        plt.subplot(2, 3, 4)
        plt.hist(y, bins=10, alpha=0.7, label='Actual', color='blue')
        plt.hist(y_pred, bins=10, alpha=0.7, label='Predicted', color='red')
        plt.xlabel('Price')
        plt.ylabel('Frequency')
        plt.title('Price Distribution')
        plt.legend()
        
        # 5. Model Performance Metrics
        plt.subplot(2, 3, 5)
        mse = mean_squared_error(y, y_pred)
        mae = mean_absolute_error(y, y_pred)
        r2 = r2_score(y, y_pred)
        
        metrics = ['MSE', 'MAE', 'R¬≤']
        values = [mse, mae, r2]
        
        plt.bar(metrics, values)
        plt.title('Model Performance Metrics')
        plt.ylabel('Score')
        
        # 6. Prediction Intervals
        plt.subplot(2, 3, 6)
        sorted_indices = np.argsort(y)
        plt.plot(y.iloc[sorted_indices], label='Actual', marker='o')
        plt.plot(y_pred[sorted_indices], label='Predicted', marker='s')
        plt.xlabel('Sample Index (sorted by actual price)')
        plt.ylabel('Price')
        plt.title('Predictions vs Actual (Sorted)')
        plt.legend()
        
        plt.tight_layout()
        plt.show()
        
        return mse, mae, r2

def main():
    # Kh·ªüi t·∫°o predictor
    predictor = CustomerBehaviorPredictor()
    
    # T·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu
    print("=== ƒêANG T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ===")
    df = predictor.load_and_prepare_data()
    print(f"T·ªïng s·ªë kh√°ch h√†ng: {len(df)}")
    print("\nTh√¥ng tin d·ªØ li·ªáu:")
    print(df.info())
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh
    print("\n=== ƒêANG HU·∫§N LUY·ªÜN M√î H√åNH ===")
    X_scaled, y = predictor.train_model(df)
    
    # Ph√¢n t√≠ch ph√¢n kh√∫c kh√°ch h√†ng
    segment_analysis = predictor.analyze_customer_segments(df)
    
    # Tr·ª±c quan h√≥a k·∫øt qu·∫£
    print("\n=== T·∫†O BI·ªÇU ƒê·ªí TR·ª∞C QUAN ===")
    mse, mae, r2 = predictor.visualize_results(X_scaled, y)
    
    print(f"\nMSE: {mse:.2f}")
    print(f"MAE: {mae:.2f}")
    print(f"R¬≤ Score: {r2:.3f}")
    
    # D·ª± ƒëo√°n cho kh√°ch h√†ng m·ªõi
    print("\n=== D·ª∞ ƒêO√ÅN CHO KH√ÅCH H√ÄNG M·ªöI ===")
    
    test_customers = [
        {"age": 35, "income": 55000, "credit_score": 720, "gender": "Nam", "job": "K·ªπ s∆∞ ph·∫ßn m·ªÅm"},
        {"age": 28, "income": 45000, "credit_score": 650, "gender": "N·ªØ", "job": "Gi√°o vi√™n"},
        {"age": 45, "income": 80000, "credit_score": 780, "gender": "Nam", "job": "B√°c sƒ©"},
        {"age": 32, "income": 42000, "credit_score": 690, "gender": "N·ªØ", "job": "Ch·ªß doanh nghi·ªáp"},
        {"age": 55, "income": 65000, "credit_score": 750, "gender": "Nam", "job": "Ngh·ªâ h∆∞u"}
    ]
    
    for customer in test_customers:
        predicted_price = predictor.predict_price(
            customer["age"], customer["income"], customer["credit_score"],
            customer["gender"], customer["job"]
        )
        
        # Ph√¢n lo·∫°i kh√°ch h√†ng
        if predicted_price < 600:
            category = "üîµ Ti·∫øt ki·ªám"
            recommendation = "S·∫£n ph·∫©m c∆° b·∫£n, gi√° r·∫ª"
        elif predicted_price < 1000:
            category = "üü° Trung b√¨nh"
            recommendation = "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng, gi√° h·ª£p l√Ω"
        else:
            category = "üî¥ Cao c·∫•p"
            recommendation = "S·∫£n ph·∫©m premium, d·ªãch v·ª• VIP"
        
        print(f"\nüë§ Kh√°ch h√†ng: {customer['age']} tu·ªïi, {customer['gender']}, {customer['job']}")
        print(f"üí∞ Thu nh·∫≠p: ${customer['income']:,}")
        print(f"üìä ƒêi·ªÉm t√≠n d·ª•ng: {customer['credit_score']}")
        print(f"üéØ D·ª± ƒëo√°n gi√° s·∫£n ph·∫©m: ${predicted_price:.2f}")
        print(f"üìã Ph√¢n lo·∫°i: {category}")
        print(f"üí° Khuy·∫øn ngh·ªã: {recommendation}")
        print("-" * 60)
    
    # T·∫°o b√°o c√°o t·ªïng h·ª£p
    print("\n=== B√ÅO C√ÅO T·ªîNG H·ª¢P ===")
    print("üîç Nh·ªØng y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn th√≥i quen mua h√†ng:")
    
    feature_importance = abs(predictor.model.coef_)
    feature_ranking = sorted(zip(predictor.feature_names, feature_importance), 
                           key=lambda x: x[1], reverse=True)
    
    for i, (feature, importance) in enumerate(feature_ranking, 1):
        print(f"{i}. {feature}: {importance:.2f}")
    
    print(f"\nüìà ƒê·ªô ch√≠nh x√°c m√¥ h√¨nh: {r2:.1%}")
    if r2 > 0.8:
        print("‚úÖ M√¥ h√¨nh c√≥ ƒë·ªô ch√≠nh x√°c cao")
    elif r2 > 0.6:
        print("‚ö†Ô∏è M√¥ h√¨nh c√≥ ƒë·ªô ch√≠nh x√°c trung b√¨nh")
    else:
        print("‚ùå M√¥ h√¨nh c·∫ßn c·∫£i thi·ªán th√™m")

if __name__ == "__main__":
    main()
