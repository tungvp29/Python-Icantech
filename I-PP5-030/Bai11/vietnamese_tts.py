#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Phi√™n b·∫£n c·∫£i thi·ªán c·ªßa SpeechRecognitionSystem v·ªõi TTS ti·∫øng Vi·ªát t·ªët h∆°n
"""

import speech_recognition as sr
import pyttsx3
import time

class ImprovedSpeechRecognitionSystem:
    def __init__(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng nh·∫≠n di·ªán √¢m thanh v·ªõi TTS ti·∫øng Vi·ªát"""
        # Kh·ªüi t·∫°o speech recognition
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        
        # Kh·ªüi t·∫°o text-to-speech engine
        self.tts_engine = pyttsx3.init()
        self.setup_vietnamese_tts()
        
        # ƒêi·ªÅu ch·ªânh cho ti·∫øng ·ªìn m√¥i tr∆∞·ªùng
        self.adjust_for_ambient_noise()
    
    def setup_vietnamese_tts(self):
        """C·∫•u h√¨nh TTS cho ti·∫øng Vi·ªát"""
        # T√¨m v√† thi·∫øt l·∫≠p gi·ªçng n√≥i ti·∫øng Vi·ªát
        voices = self.tts_engine.getProperty('voices')
        vietnamese_voice = None
        
        # T√¨m gi·ªçng n√≥i ti·∫øng Vi·ªát (Linh)
        for voice in voices:
            if 'vi-VN' in voice.id or 'Linh' in voice.name:
                vietnamese_voice = voice
                break
        
        if vietnamese_voice:
            self.tts_engine.setProperty('voice', vietnamese_voice.id)
            print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p gi·ªçng n√≥i ti·∫øng Vi·ªát: {vietnamese_voice.name}")
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·ªçng n√≥i ti·∫øng Vi·ªát, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh")
            # S·ª≠ d·ª•ng gi·ªçng n√≥i ƒë·∫ßu ti√™n c√≥ s·∫µn
            if voices:
                self.tts_engine.setProperty('voice', voices[0].id)
        
        # Thi·∫øt l·∫≠p t·ªëc ƒë·ªô ƒë·ªçc ch·∫≠m h∆°n cho ti·∫øng Vi·ªát
        self.tts_engine.setProperty('rate', 120)  # Ch·∫≠m h∆°n ƒë·ªÉ ph√°t √¢m r√µ r√†ng
        
        # Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng
        self.tts_engine.setProperty('volume', 1.0)
    
    def get_available_vietnamese_voices(self):
        """L·∫•y danh s√°ch gi·ªçng n√≥i ti·∫øng Vi·ªát c√≥ s·∫µn"""
        voices = self.tts_engine.getProperty('voices')
        vietnamese_voices = []
        
        for voice in voices:
            # T√¨m gi·ªçng n√≥i c√≥ th·ªÉ ph√π h·ª£p v·ªõi ti·∫øng Vi·ªát
            if any(keyword in voice.id.lower() or keyword in voice.name.lower() 
                   for keyword in ['vi-vn', 'vietnam', 'linh']):
                vietnamese_voices.append({
                    'id': voice.id,
                    'name': voice.name,
                    'languages': getattr(voice, 'languages', ['N/A'])
                })
        
        return vietnamese_voices
    
    def adjust_for_ambient_noise(self):
        """ƒêi·ªÅu ch·ªânh microphone cho ti·∫øng ·ªìn m√¥i tr∆∞·ªùng"""
        print("ƒêang ƒëi·ªÅu ch·ªânh microphone cho ti·∫øng ·ªìn m√¥i tr∆∞·ªùng...")
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
        print("Ho√†n th√†nh ƒëi·ªÅu ch·ªânh microphone.")
    
    def text_to_speech_vietnamese(self, text):
        """
        H√†m chuy·ªÉn vƒÉn b·∫£n ti·∫øng Vi·ªát th√†nh √¢m thanh v·ªõi c·∫£i thi·ªán
        
        Args:
            text (str): VƒÉn b·∫£n ti·∫øng Vi·ªát c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i
        """
        try:
            # Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n ti·∫øng Vi·ªát
            processed_text = self.preprocess_vietnamese_text(text)
            
            print(f"ƒêang ƒë·ªçc: {processed_text}")
            self.tts_engine.say(processed_text)
            self.tts_engine.runAndWait()
            
        except Exception as e:
            print(f"L·ªói khi chuy·ªÉn vƒÉn b·∫£n th√†nh √¢m thanh: {e}")
            # Fallback: th·ª≠ v·ªõi vƒÉn b·∫£n g·ªëc
            try:
                self.tts_engine.say(text)
                self.tts_engine.runAndWait()
            except:
                print("Kh√¥ng th·ªÉ ƒë·ªçc vƒÉn b·∫£n")
    
    def preprocess_vietnamese_text(self, text):
        """
        Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n ti·∫øng Vi·ªát ƒë·ªÉ c·∫£i thi·ªán ph√°t √¢m
        """
        # Thay th·∫ø m·ªôt s·ªë t·ª´ kh√≥ ph√°t √¢m
        replacements = {
            'AI': '√Çy Ai',
            'API': '√Çy Pi √Çy',
            'URL': 'Iu ·∫†t En',
            'HTML': '√âc Ti Em En',
            'CSS': 'Xi Es Es',
            'JS': 'Gi√¢y Es',
            'Python': 'Pai thon',
            'GitHub': 'G√≠t H√°p',
            'Streamlit': 'Strim l√≠t',
            'TTS': 'Ti Ti Es',
            'STT': 'Es Ti Ti',
            'vs': 'v·ªõi',
            '&': 'v√†',
            '%': 'ph·∫ßn trƒÉm',
            '@': 'a c√≤ng',
            '#': 'thƒÉng',
            '$': 'ƒë√¥ la',
        }
        
        processed_text = text
        for old, new in replacements.items():
            processed_text = processed_text.replace(old, new)
        
        # Th√™m d·∫•u c√¢u ƒë·ªÉ t·∫°o ngh·ªâ t·ª± nhi√™n
        if not processed_text.endswith(('.', '!', '?')):
            processed_text += '.'
        
        return processed_text
    
    def test_vietnamese_voices(self, test_text="Xin ch√†o, t√¥i ƒëang test gi·ªçng n√≥i ti·∫øng Vi·ªát"):
        """Test c√°c gi·ªçng n√≥i ti·∫øng Vi·ªát c√≥ s·∫µn"""
        voices = self.get_available_vietnamese_voices()
        
        if not voices:
            print("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªçng n√≥i ti·∫øng Vi·ªát")
            return
        
        print(f"üé§ Test {len(voices)} gi·ªçng n√≥i ti·∫øng Vi·ªát:")
        
        for i, voice in enumerate(voices, 1):
            print(f"\n{i}. Test gi·ªçng: {voice['name']}")
            try:
                self.tts_engine.setProperty('voice', voice['id'])
                self.tts_engine.say(test_text)
                self.tts_engine.runAndWait()
                time.sleep(1)
            except Exception as e:
                print(f"   ‚ùå L·ªói: {e}")
    
    def set_voice_by_name(self, voice_name):
        """Thi·∫øt l·∫≠p gi·ªçng n√≥i theo t√™n"""
        voices = self.tts_engine.getProperty('voices')
        
        for voice in voices:
            if voice_name.lower() in voice.name.lower():
                self.tts_engine.setProperty('voice', voice.id)
                print(f"‚úÖ ƒê√£ chuy·ªÉn sang gi·ªçng: {voice.name}")
                return True
        
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y gi·ªçng n√≥i: {voice_name}")
        return False
    
    def speech_to_text(self):
        """
        H√†m nh·∫≠n di·ªán v√† chuy·ªÉn √¢m thanh th√†nh vƒÉn b·∫£n (gi·ªØ nguy√™n)
        """
        print("B·∫Øt ƒë·∫ßu l·∫Øng nghe... (N√≥i 'stop' ƒë·ªÉ d·ª´ng)")
        
        while True:
            try:
                with self.microphone as source:
                    print("ƒêang l·∫Øng nghe...")
                    audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=10)
                
                print("ƒêang x·ª≠ l√Ω √¢m thanh...")
                text = self.recognizer.recognize_google(audio, language='vi-VN')
                
                print(f"B·∫°n ƒë√£ n√≥i: {text}")
                
                if "stop" in text.lower() or "d·ª´ng" in text.lower():
                    print("ƒê√£ nghe t·ª´ kh√≥a d·ª´ng. K·∫øt th√∫c l·∫Øng nghe.")
                    self.text_to_speech_vietnamese("ƒê√£ d·ª´ng l·∫Øng nghe.")
                    break
                
                return text
                
            except sr.WaitTimeoutError:
                print("Kh√¥ng nghe th·∫•y √¢m thanh n√†o trong 5 gi√¢y.")
            except sr.UnknownValueError:
                print("Kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c √¢m thanh. Vui l√≤ng n√≥i r√µ h∆°n.")
            except sr.RequestError as e:
                print(f"L·ªói k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• nh·∫≠n di·ªán: {e}")
            except KeyboardInterrupt:
                print("\nƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
                break
            except Exception as e:
                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")


def demo_vietnamese_tts():
    """Demo ch·ª©c nƒÉng TTS ti·∫øng Vi·ªát c·∫£i thi·ªán"""
    print("=== DEMO TEXT-TO-SPEECH TI·∫æNG VI·ªÜT C·∫¢I THI·ªÜN ===\n")
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    speech_system = ImprovedSpeechRecognitionSystem()
    
    # Hi·ªÉn th·ªã gi·ªçng n√≥i ti·∫øng Vi·ªát c√≥ s·∫µn
    vietnamese_voices = speech_system.get_available_vietnamese_voices()
    if vietnamese_voices:
        print("üé§ Gi·ªçng n√≥i ti·∫øng Vi·ªát c√≥ s·∫µn:")
        for voice in vietnamese_voices:
            print(f"  - {voice['name']} ({voice['id']})")
    
    # Test c√°c c√¢u ti·∫øng Vi·ªát
    test_sentences = [
        "Xin ch√†o c√°c b·∫°n! T√¥i l√† tr·ª£ l√Ω AI.",
        "H√¥m nay l√† m·ªôt ng√†y ƒë·∫πp tr·ªùi ·ªü Vi·ªát Nam.",
        "Ch∆∞∆°ng tr√¨nh Python c√≥ th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i ti·∫øng Vi·ªát.",
        "T√¥i c√≥ th·ªÉ ƒë·ªçc c√°c t·ª´ kh√≥ nh∆∞: GitHub, Streamlit, API, HTML, CSS.",
        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh nh·∫≠n di·ªán √¢m thanh!"
    ]
    
    print(f"\nüó£Ô∏è ƒêang ƒë·ªçc {len(test_sentences)} c√¢u test:")
    for i, sentence in enumerate(test_sentences, 1):
        print(f"\n{i}. {sentence}")
        speech_system.text_to_speech_vietnamese(sentence)
        time.sleep(1)


if __name__ == "__main__":
    demo_vietnamese_tts()
