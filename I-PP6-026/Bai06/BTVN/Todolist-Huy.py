import streamlit as st
import json
import os
from datetime import datetime, date, time
import uuid

st.set_page_config(
    page_title="Todo List Manager",
    page_icon="üìù",
    layout="wide"
)

DATA_FILE = "todos.json"

def load_todos():
    """T·∫£i d·ªØ li·ªáu todos t·ª´ file"""
    return []

def load_groups():
    """T·∫£i d·ªØ li·ªáu groups t·ª´ file"""
    return ['C√¥ng vi·ªác', 'C√° nh√¢n', 'H·ªçc t·∫≠p', 'Kh√°c']

# Kh·ªüi t·∫°o session state
if 'todos' not in st.session_state:
    st.session_state.todos = load_todos()
if 'groups' not in st.session_state:
    st.session_state.groups = load_groups()
if 'editing_todo' not in st.session_state:
    st.session_state.editing_todo = None

def save_data():
    """L∆∞u d·ªØ li·ªáu v√†o file"""
    pass

def add_todo(title, description, group, due_date, due_time, location, priority, is_important, url, image_path):
    pass

def update_todo(todo_id, title, description, group, due_date, due_time, location, priority, is_important, url, image_path):
    pass

def delete_todo(todo_id):
    pass

def toggle_complete(todo_id):
    pass

def filter_todos(search_term="", selected_group="", filter_date=None, show_completed=True):
    pass

def display_todo_form(todo=None):
    """Hi·ªÉn th·ªã form th√™m/s·ª≠a todo"""
    is_edit = todo is not None

    with st.sidebar:
        st.header("üîç T√¨m ki·∫øm v√† l·ªçc")
        search = st.text_input("T√¨m ki·∫øm c√¥ng vi·ªác")
        group_filter = st.selectbox("L·ªçc theo nh√≥m", ["T·∫•t c·∫£"] + st.session_state.groups)
        filter_date = st.date_input("L·ªçc theo ng√†y", value=None)
        show_done = st.checkbox("Hi·ªÉn th·ªã c√¥ng vi·ªác ƒë√£ ho√†n th√†nh", value=True)

        st.markdown("---")
        st.header("üìä Th·ªëng k√™")
        total = len(st.session_state.todos)
        done = sum(1 for t in st.session_state.todos if t["done"])
        important = sum(1 for t in st.session_state.todos if t["important"] and not t["done"])
        st.metric("T·ªïng c√¥ng vi·ªác", total)
        st.metric("ƒê√£ ho√†n th√†nh", done)
        st.metric("Quan tr·ªçng (ch∆∞a xong)", important)

    with st.form(key=f"todo_form_{todo['id'] if is_edit else 'new'}"):
        st.subheader("‚úèÔ∏è S·ª≠a c√¥ng vi·ªác" if is_edit else "‚ûï Th√™m c√¥ng vi·ªác m·ªõi")

        col1, col2 = st.columns(2)

        with col1:
            title = st.text_input("Ti√™u ƒë·ªÅ*", value=todo['title'] if is_edit else "")
            description = st.text_area("M√¥ t·∫£", value=todo['description'] if is_edit else "")

            # Qu·∫£n l√Ω nh√≥m
            st.write("**Nh√≥m c√¥ng vi·ªác**")
            col_group1, col_group2 = st.columns([3, 1])
            with col_group1:
                group = st.selectbox("Ch·ªçn nh√≥m", options=st.session_state.groups, 
                                index=st.session_state.groups.index(todo['group']) if is_edit and todo['group'] in st.session_state.groups else 0)
            with col_group2:
                if st.form_submit_button("‚ûï Nh√≥m m·ªõi"):
                    st.session_state.show_add_group = True

            # Th√™m nh√≥m m·ªõi
            if 'show_add_group' in st.session_state and st.session_state.show_add_group:
                new_group = st.text_input("T√™n nh√≥m m·ªõi")
                if st.form_submit_button("Th√™m nh√≥m") and new_group and new_group not in st.session_state.groups:
                    st.session_state.groups.append(new_group)
                    save_data()
                    st.session_state.show_add_group = False
                    st.rerun()

        with col2:
            # Ng√†y gi·ªù
            due_date = st.date_input("Ng√†y h·∫øt h·∫°n", value=datetime.fromisoformat(todo['due_date']).date() if is_edit and todo['due_date'] else None)
            due_time = st.time_input("Gi·ªù h·∫øt h·∫°n", value=datetime.strptime(todo['due_time'], '%H:%M').time() if is_edit and todo['due_time'] else time(9, 0))

            location = st.text_input("ƒê·ªãa ƒëi·ªÉm", value=todo['location'] if is_edit else "")

            # ƒê·ªô ∆∞u ti√™n
            priority_options = ["Th·∫•p", "Trung b√¨nh", "Cao", "R·∫•t cao"]
            priority = st.selectbox("ƒê·ªô ∆∞u ti√™n", options=priority_options, index=priority_options.index(todo['priority']) if is_edit and todo['priority'] in priority_options else 1)

            is_important = st.checkbox("‚≠ê C√¥ng vi·ªác quan tr·ªçng", value=todo['is_important'] if is_edit else False)

def main():
    """H√†m ch√≠nh"""
    st.title("üìù Todo List Manager")
    st.markdown("---")
    
    # Sidebar cho b·ªô l·ªçc
    with st.sidebar:
        st.header("üîç T√¨m ki·∫øm & L·ªçc")
        
        # T√¨m ki·∫øm
        search_term = st.text_input("üîç T√¨m ki·∫øm c√¥ng vi·ªác")
        
        # L·ªçc theo nh√≥m
        group_options = ["T·∫•t c·∫£"] + st.session_state.groups
        selected_group = st.selectbox("üè∑Ô∏è L·ªçc theo nh√≥m", options=group_options)
        
        # L·ªçc theo ng√†y
        filter_date = st.date_input("üìÖ L·ªçc theo ng√†y", value=None)
        
        # Hi·ªÉn th·ªã c√¥ng vi·ªác ƒë√£ ho√†n th√†nh
        show_completed = st.checkbox("‚úÖ Hi·ªÉn th·ªã c√¥ng vi·ªác ƒë√£ ho√†n th√†nh", value=True)
        
        st.markdown("---")
        
        # Th·ªëng k√™
        st.header("üìä Th·ªëng k√™")
        total_todos = len(st.session_state.todos)
        print(st.session_state.todos)
        completed_todos = len([t for t in st.session_state.todos if t['completed'] == 1])
        important_todos = len([t for t in st.session_state.todos if t['is_important'] and not t['completed']])
        
        st.metric("T·ªïng c√¥ng vi·ªác", total_todos)
        st.metric("ƒê√£ ho√†n th√†nh", completed_todos)
        st.metric("Quan tr·ªçng (ch∆∞a xong)", important_todos)
        
        if total_todos > 0:
            completion_rate = (completed_todos / total_todos) * 100
            st.metric("T·ª∑ l·ªá ho√†n th√†nh", f"{completion_rate:.1f}%")
    
    # N·ªôi dung ch√≠nh
    # Form th√™m/s·ª≠a todo
    if st.session_state.editing_todo:
        editing_todo = next((t for t in st.session_state.todos if t['id'] == st.session_state.editing_todo), None)
        if editing_todo:
            display_todo_form(editing_todo)
        else:
            st.session_state.editing_todo = None
    else:
        display_todo_form()
    
    st.markdown("---")
    
    # Hi·ªÉn th·ªã danh s√°ch todos
    st.header("üìã Danh s√°ch c√¥ng vi·ªác")
    
    # L·ªçc todos
    filtered_todos = filter_todos(search_term, selected_group, filter_date, show_completed)
    
    if not filtered_todos:
        st.info("üìù Kh√¥ng c√≥ c√¥ng vi·ªác n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc!")
    else:
        # S·∫Øp x·∫øp todos
        sort_option = st.selectbox("üìä S·∫Øp x·∫øp theo", 
                                 ["Ng√†y t·∫°o (m·ªõi nh·∫•t)", "Ng√†y h·∫øt h·∫°n", "ƒê·ªô ∆∞u ti√™n", "T√™n c√¥ng vi·ªác"])
        
        if sort_option == "Ng√†y t·∫°o (m·ªõi nh·∫•t)":
            filtered_todos.sort(key=lambda x: x['created_at'], reverse=True)
        elif sort_option == "Ng√†y h·∫øt h·∫°n":
            filtered_todos.sort(key=lambda x: x['due_date'] or '9999-12-31')
        elif sort_option == "ƒê·ªô ∆∞u ti√™n":
            priority_order = {"R·∫•t cao": 0, "Cao": 1, "Trung b√¨nh": 2, "Th·∫•p": 3}
            filtered_todos.sort(key=lambda x: priority_order.get(x['priority'], 4))
        else:  # T√™n c√¥ng vi·ªác
            filtered_todos.sort(key=lambda x: x['title'].lower())

        # # Hi·ªÉn th·ªã todos
        # for todo in filtered_todos:
        #     display_todo_card(todo)

if __name__ == "__main__":
    main()
            